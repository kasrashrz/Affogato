package domain

import (
	checkErr "errors"
	"fmt"
	"github.com/kasrashrz/Affogato/utils/errors"
	"gorm.io/gorm"
)

func (market *Market) AddPlayer() *errors.RestErr {

	var player Player

	if err := db.Table("players").Where("id = ?", market.PlayerId).First(&player).Error; err != nil {
		if checkErr.Is(err, gorm.ErrRecordNotFound) {
			return errors.NotFoundError("player not found")
		}
		return errors.InternalServerError("something went wrong")
	}
	if err := db.Save(&market).Error; err != nil {
		return errors.InternalServerError("something went wrong")
	}

	return nil
}

func (market *Market) BuyPlayer(uid int64, marketId int64) *errors.RestErr {
	var player Player
	// User that owns the player in his team
	var owner User
	var buyer User
	var dao User
	var team Team
	if err := db.Table("markets").
		Where("id = ? AND is_sold = 0", marketId).
		First(&market).Error; err != nil {
		if checkErr.Is(err, gorm.ErrRecordNotFound) {
			return errors.NotFoundError("market not found")
		}
		return errors.InternalServerError("something went wrong")
	}

	if err := db.Table("players").
		Where("id = ?", market.PlayerId).
		First(&player).Error; err != nil {
		if checkErr.Is(err, gorm.ErrRecordNotFound) {
			return errors.NotFoundError("player not found")
		}
		return errors.InternalServerError("something went wrong")
	}

	if err := db.Table("users").
		Where("id = ?", uid).
		First(&buyer).Error; err != nil {
		if checkErr.Is(err, gorm.ErrRecordNotFound) {
			return errors.NotFoundError("player not found")
		}
		return errors.InternalServerError("something went wrong")
	}

	if buyer.Coin < player.Price {
		return errors.BadRequestError("not enough money")
	}

	if market.AutoGenerated == false {
		db.Select("u.id, u.team_id, u.gem, u.coin").
			Table("players").
			Joins("join teams t on t.id = players.team_id").
			Joins("join users u on t.id = u.team_id").
			Where("players.id = ?", market.PlayerId).First(&owner)

		if err := dao.CoinDecrement(market.PlayerPrice, int64(buyer.ID)); err != nil {
			return errors.InternalServerError("something went wrong when decreasing coin from buyer")
		}
		if err := dao.CoinIncrement(market.PlayerPrice, int64(owner.ID)); err != nil {
			return errors.InternalServerError("something went wrong when increasing seller coin")
		}

		paymentData := PaymentHistory{
			Model:           gorm.Model{},
			Team:            Team{},
			TeamId:          int64(buyer.TeamId),
			PaymentDetail:   PaymentDetail{},
			PaymentDetailId: 6,
			Player:          Player{},
			PlayerId:        int64(player.ID),
		}

		if err := db.Create(&paymentData).Error; err != nil {
			return errors.InternalServerError("something went wrong while saving payment")
		}
		if err := db.Table("players").
			Where("id = ?", market.PlayerId).
			Updates(map[string]interface{}{"team_id": buyer.TeamId}).
			Error; err != nil {
			return errors.InternalServerError("something went wrong")
		}

		if err := db.Table("markets").
			Where("id = ?", market.ID).
			Updates(map[string]interface{}{"is_sold": 1}).
			Error; err != nil {
			return errors.InternalServerError("something went wrong")
		}

		event := "player " + player.Name + " joined your team"
		fmt.Println("USER ID", uid)
		if err := team.SubmitTransferData(uid, int64(player.ID), event); err != nil {
			return errors.InternalServerError("something went wrong setting transfer data")
		}

		return nil
	}

	if market.AutoGenerated == true {
		if err := dao.CoinDecrement(market.PlayerPrice, int64(buyer.ID)); err != nil {
			return errors.InternalServerError("something went wrong when decreasing coin from buyer")
		}

		if err := db.Table("players").
			Where("id = ?", market.PlayerId).
			Updates(map[string]interface{}{"team_id": buyer.TeamId}).
			Error; err != nil {
			return errors.InternalServerError("something went wrong")
		}

		if err := db.Table("markets").
			Where("id = ?", market.ID).
			Updates(map[string]interface{}{"is_sold": 1}).
			Error; err != nil {
			return errors.InternalServerError("something went wrong")
		}

		event := "player " + player.Name + " joined your team"
		fmt.Println("USER ID", uid)
		if err := team.SubmitTransferData(uid, int64(player.ID), event); err != nil {
			return errors.InternalServerError("something went wrong setting transfer data")
		}
	}

	return nil
}

func (market *Market) AllMarketChoices(start int64, count int64) ([]map[string]interface{}, *errors.RestErr) {
	output := []map[string]interface{}{}

	if err := db.Raw("select"+
		" markets.id as `mark_id`, markets.player_id, player_price, is_sold, p.id, post_id, status_id, name, energy, age, skill, cheer, pp.goal, price, post_name,"+
		" control, power, pass, shoot, dribble, tackle, head, endurance, strength"+
		" from markets"+
		" join players p on p.id = markets.player_id join posts p2 on p.post_id = p2.id"+
		" join player_powers pp on p.id = pp.player_id "+
		" where is_sold = 0 limit ?, ?", start, count).Scan(&output).Error; err != nil {
		fmt.Println(err)
	}

	return output, nil
}
